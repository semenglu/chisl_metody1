    Этот код решает систему линейных уравнений методом Гаусса-Жордана. Сначала извлекаются матрица A и вектор-столбец b из файла "input.txt".
Затем вызывается функция gauss_elimination, которая принимает матрицу A и вектор-столбец b в качестве аргументов и возвращает решение системы уравнений.
Функция gauss_elimination реализует метод Гаусса-Жордана с частичным выбором главного элемента.


    В методе Гаусса главный элемент в выбранном столбце ищется по всем строкам, начиная с текущей строки и заканчивая последней строкой матрицы.
Кроме того, перед началом прямого хода метода Гаусса обычно производится выбор главного элемента. В этом случае главный элемент выбирается из всех элементов матрицы,
а не только из текущего столбца. Обычно используется так называемый "полный выбор главного элемента", при котором выбирается элемент с наибольшим по модулю значением 
из всех элементов матрицы, включая элементы на диагонали и элементы вне диагонали.
Это делается для того, чтобы минимизировать ошибку округления при вычислении, особенно если матрица содержит элементы с очень большими и очень маленькими значениями.
При полном выборе главного элемента можно быть уверенным, что главный элемент не будет слишком малым или слишком большим по сравнению с другими элементами матрицы.
Кроме того, при полном выборе главного элемента не нужно заботиться о том, что главный элемент может быть равен нулю, что может привести к ошибке деления на ноль во 
время прямого хода метода Гаусса.


import numpy as np

#Данная функция меняет местами две строки матрицы A и соответствующие элементы вектор столбца b
def swap_rows(A, b, i, j):
    tmp = A[i].copy()
    A[i] = A[j].copy()
    A[j] = tmp
    b[i], b[j] = b[j], b[i]


def swap_col(A, x_order, i, j):
    for row in range(len(A)):
        A[row][i], A[row][j] = A[row][j], A[row][i]
    x_order[i], x_order[j] = x_order[j], x_order[i]


def gauss_elimination(A, b):
    n = len(A)
    x_order = [i for i in range(n)]
    for i in range(n):
        # Находим максимальный элемент во всей матрице, начиная с (i, i)-го элемента
        max_el = abs(A[i][i])
        max_row = i
        max_col = i
        for j in range(i, n):
            for k in range(i, n):
                if abs(A[j][k]) > max_el:
                    max_el = abs(A[j][k])
                    max_row = j
                    max_col = k
        # Меняем строки и столбцы местами, чтобы максимальный элемент был на диагонали
        swap_rows(A, b, i, max_row)
        swap_col(A, x_order, i, max_col)
        # Приводим все элементы под диагональю к нулю
        for j in range(i + 1, n):
            c = -A[j][i] / A[i][i]
            for k in range(i + 1, n):
                A[j][k] += c * A[i][k]
            b[j] += c * b[i]
            A[j][i] = 0

    # Обратный ход
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = b[i] / A[i][i]
        for j in range(i - 1, -1, -1):
            b[j] -= A[j][i] * x[i]
            A[j][i] = 0

    return [x[i] for i in x_order]


# Считываем данные из файла
data = np.loadtxt("input.txt")

# Извлекаем матрицу A и вектор-столбец b из данных
A = data[:, :-1]
b = data[:, -1]

# Вызываем функцию для решения системы уравнений
x = gauss_elimination(A, b)

# Выводим решение
print("Ответ:")
f = open("file8.txt", "x")

for index, _x in enumerate(x):
    print(f"x{index + 1} = " + "{:.2f}".format(_x) + "  ")
    f.writelines(f"x{index + 1} = " + "{:.2f}".format(_x))
    f.writelines("\n")
